generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  MISSED
  CANCELLED
  RESCHEDULED
}

enum PaymentMethod {
  CARD
  PAYPAL
}

enum PricingType {
  GLOBAL_SINGLE
  GLOBAL_PACKAGE
  CLIENT_SINGLE
  CLIENT_PACKAGE
}

enum PackageStatus {
  ACTIVE
  EXPIRED
  REFUNDED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CLIENT)
  birthDate     DateTime?
  phone         String?
  telegram      String?
  profession    String?

  accounts       Account[]
  appointments   Appointment[]     @relation("ClientAppointments")
  created        Appointment[]     @relation("AdminAppointments")
  payments       Payment[]
  pricing        ClientPricing[]
  purchases      PackagePurchase[]
  createdAt      DateTime          @default(now())
  availableSlots AvailableSlot[]
  sessionToken   Session[]
}

model Appointment {
  id            String        @id @default(cuid())
  date          DateTime
  durationMin   Int
  client        User          @relation("ClientAppointments", fields: [clientId], references: [id])
  clientId      String
  admin         User          @relation("AdminAppointments", fields: [adminId], references: [id])
  adminId       String
  paymentStatus PaymentStatus @default(PENDING)
  price         Decimal       @default(0.0)
  pricingType   PricingType

  packagePurchase   PackagePurchase? @relation(fields: [packagePurchaseId], references: [id])
  packagePurchaseId String?          @unique

  link   String? // Video call link
  status SessionStatus @default(SCHEDULED)
  notes  String?
  files  String[] // Array of file URLs

  availableSlot   AvailableSlot? @relation(fields: [availableSlotId], references: [id])
  availableSlotId String?        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AvailableSlot {
  id        String   @id @default(cuid())
  admin     User     @relation(fields: [adminId], references: [id])
  adminId   String
  date      DateTime
  duration  Int      @default(50) // за замовчуванням 50 хв
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointment   Appointment? @relation
  appointmentId String?      @unique
}

model Payment {
  id         String        @id @default(cuid())
  client     User          @relation(fields: [clientId], references: [id])
  clientId   String
  amount     Decimal
  paidAt     DateTime
  method     PaymentMethod
  package    Boolean       @default(false)
  sessionIds String[] // Appointment IDs this payment covers
}

model ClientPricing {
  id           String   @id @default(cuid())
  client       User     @relation(fields: [clientId], references: [id])
  clientId     String
  price        Decimal
  packagePrice Decimal?
  packageSize  Int? // Number of sessions in the package
  isActive     Boolean  @default(true)
  validFrom    DateTime @default(now())
  createdAt    DateTime @default(now())

  @@index([clientId, isActive])
}

model GlobalPricing {
  id          String   @id @default(cuid())
  singlePrice Decimal
  validFrom   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PackageTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String?
  sessionsTotal Int
  price         Decimal
  validDays     Int
  isActive      Boolean  @default(true)
  validFrom     DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  purchases PackagePurchase[]
}

model PackagePurchase {
  id         String          @id @default(cuid())
  client     User            @relation(fields: [clientId], references: [id])
  clientId   String
  template   PackageTemplate @relation(fields: [templateId], references: [id])
  templateId String

  startDate    DateTime
  endDate      DateTime
  sessionsUsed Int           @default(0)
  status       PackageStatus @default(ACTIVE)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Appointment Appointment?

  @@index([clientId, status])
}

// === NextAuth ===

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
