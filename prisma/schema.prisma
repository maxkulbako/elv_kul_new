generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  MISSED
  CANCELLED
  RESCHEDULED
}

enum PaymentMethod {
  CARD
  PAYPAL
}

enum PricingType {
  GLOBAL_SINGLE
  GLOBAL_PACKAGE
  CLIENT_SINGLE
  CLIENT_PACKAGE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CLIENT)
  birthDate     DateTime?
  phone         String?
  telegram      String?
  profession    String?

  accounts     Account[]
  appointments Appointment[]   @relation("ClientAppointments")
  created      Appointment[]   @relation("AdminAppointments")
  payments     Payment[]
  pricing      ClientPricing[]
  createdAt    DateTime        @default(now())

  sessionToken Session[]
}

model Appointment {
  id            String        @id @default(cuid())
  date          DateTime
  durationMin   Int
  client        User          @relation("ClientAppointments", fields: [clientId], references: [id])
  clientId      String
  admin         User          @relation("AdminAppointments", fields: [adminId], references: [id])
  adminId       String
  paymentStatus PaymentStatus @default(PENDING)
  price         Decimal       @default(0.0)
  pricingType   PricingType
  link          String? // Video call link
  status        SessionStatus @default(SCHEDULED)
  notes         String?
  files         String[] // Array of file URLs
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Payment {
  id         String        @id @default(cuid())
  client     User          @relation(fields: [clientId], references: [id])
  clientId   String
  amount     Decimal
  paidAt     DateTime
  method     PaymentMethod
  package    Boolean       @default(false)
  sessionIds String[] // Appointment IDs this payment covers
}

model ClientPricing {
  id           String   @id @default(cuid())
  client       User     @relation(fields: [clientId], references: [id])
  clientId     String
  price        Decimal
  packagePrice Decimal?
  packageSize  Int? // Number of sessions in the package
  isActive     Boolean  @default(true)
  validFrom    DateTime @default(now())
  createdAt    DateTime @default(now())

  @@index([clientId, isActive])
}

model GlobalPricing {
  id           String   @id @default(cuid())
  name         String
  singlePrice  Decimal
  packagePrice Decimal?
  packageSize  Int
  durationDays Int // Duration in days for the package validity
  validFrom    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// === NextAuth ===

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
